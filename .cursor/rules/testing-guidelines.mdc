---
description: 
globs: 
alwaysApply: true
---
# Testing Guidelines

## ‚ö†Ô∏è CRITICAL WARNINGS

### üö® DO NOT AUTO-TEST if project involves:
- Complex UI interactions requiring visual verification
- Full-stack applications with frontend/backend integration
- Real-time features (websockets, streaming, live audio)
- External service integrations (APIs, databases)
- Projects requiring human judgment for correctness

**AudioInsight involves real-time audio processing, full-stack integration, and external services - be very careful with automated testing.**

## When Creating Tests

### Test Organization
```
AudioInsight/
‚îú‚îÄ‚îÄ audioinsight/
‚îÇ   ‚îú‚îÄ‚îÄ processors.py
‚îÇ   ‚îî‚îÄ‚îÄ config.py
‚îî‚îÄ‚îÄ test/
    ‚îú‚îÄ‚îÄ test_processors.py
    ‚îî‚îÄ‚îÄ test_config.py
```

### Requirements
- Place under dedicated `test/` directory
- Mirror package structure
- Use `pytest` for test framework
- Handle port conflicts (port 8000 always in use and conflicts)

### Test Structure Example
```python
import pytest
from pathlib import Path
from audioinsight.processors import AudioProcessor

class TestAudioProcessor:
    def test_process_simple_audio(self):
        """Test basic audio processing functionality."""
        processor = AudioProcessor()
        # Simple unit test for isolated functionality
        pass
    
    def test_config_validation(self):
        """Test configuration validation."""
        # Test configuration without external dependencies
        pass
```

## What TO Test
- Pure functions with deterministic outputs
- Configuration validation
- Data structure validation
- Error handling for edge cases

## What NOT to Test Automatically
- Real-time audio processing
- WebSocket connections
- Full API integration
- UI components
- External service calls

## Port Conflict Handling
Always use dynamic port allocation in tests:
```python
import socket

def get_free_port():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind(('', 0))
        s.listen(1)
        port = s.getsockname()[1]
    return port

# Use in test setup
test_port = get_free_port()
```
